name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main-x
    #   - dev
    # package.json 更改后再触发发布
    # paths: [ "package.json" ]
jobs:
  buildStatic:
    runs-on: ubuntu-20.04
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v1


      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - id: release_check
        run: |
          echo "::set-output name=RELEASE_STATUS::$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/teamide/releases/tag/v${{ steps.release_version.outputs.value }})"

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: true # 是否是草稿
          prerelease: false # 是否是预发布

      # 准备 electron-template
      - run: |
          chmod +x ./desktop/install-electron-template.sh
          ./desktop/install-electron-template.sh
          mkdir -p electron-template/assets/server/lib
          echo '依赖DLL、so库等' > electron-template/assets/server/lib/README.md

      # 打包构建 html
      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # npm install
      - run: |
          git clone https://github.com/team-ide/teamide-html
          cd teamide-html
          npm install
          npm run build

      # 创建release相关目录
      - run: |
          mkdir release
          mkdir release/base
          
          cp -rf package.json release/
          cp -rf RELEASE.md release/
          cp -rf README.md release/base/
          cp -rf CHANGELOG.md release/base/CHANGELOG.md
          
          cp -rf release/base release/teamide-linux-x64
          cp -rf release/base release/teamide-darwin-x64
          cp -rf release/base release/teamide-windows-x64
          cp -rf teamide-html/dist release/statics


      - run: |
          echo '{"upload_url":""}' > release/release.json

      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: |
          echo '${{ steps.create_release.outputs.upload_url }}'
          echo '{"upload_url":"${{ steps.create_release.outputs.upload_url }}"}' > release/release.json

      #      - name: Build Server
      #        uses: actions/setup-go@v2
      #        with:
      #          go-version: "1.20.14"
      # 将静态资源打包html.go
      #      - run: |
      #          go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static
      #          mv internal/static/html.go release/html.go

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: electron-template
          path: electron-template

  buildMAC:
    needs: buildStatic
    runs-on: macos-12-large
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v1

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.14"

      # 将静态资源打包html.go
      #          mv release/html.go internal/static/html.go
      - run: |
          mv release/statics ./electron-template/assets/server/statics
          go mod tidy
          go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./electron-template/assets/server/server .

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd electron-template
          chmod +x assets/server/server
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --mac -p always

  buildLinux:
    needs: buildStatic
    runs-on: ubuntu-20.04
    container: docker.io/teamide/build:1.5
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v1

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.14"

      # 将静态资源打包html.go
      #          mv release/html.go internal/static/html.go
      - run: |
          cp -rf release/statics ./electron-template/assets/server/statics
          go mod tidy
          go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./electron-template/assets/server/server .
          CGO_ENABLED=0 go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-linux-x64/teamide-node teamide/pkg/node/main 

      - run: |
          mkdir -p release/teamide-server-amd64/lib
          cp -rf release/statics release/teamide-server-amd64/statics
          cp -rf conf/release release/teamide-server-amd64/conf
          cp -rf lib/shentong/amd64/libaci.so release/teamide-server-amd64/lib/libaci.so
          cp -rf docker/server.sh release/teamide-server-amd64/server.sh
          chmod +x release/teamide-server-amd64/server.sh
          cp -rf release/teamide-server-amd64 release/teamide-server-arm64
          rm -rf release/teamide-server-arm64/lib/libaci.so
          cp -rf lib/shentong/arm64/libaci.so release/teamide-server-arm64/lib/libaci.so
          go mod tidy
          go build -ldflags "-s -X main.buildFlags=--isServer -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-server-amd64/teamide .
          CC=/usr/local/share/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc CXX=/usr/local/share/gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++ CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "-s -X main.buildFlags=--isServer -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./release/teamide-server-arm64/teamide .

      - run: |
          cd release/teamide-server-amd64
          ldd teamide

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          #这里用到了github的secrets功能，避免账户和密码随仓库泄露
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Build and push amd64
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile-amd64
          push: true
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
          platforms: linux/amd64
          #指定用户/仓库名
          tags: teamide/teamide-server:latest,teamide/teamide-server:${{ steps.release_version.outputs.value }}
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Build and push arm64
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile-arm64
          push: true
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
          platforms: linux/arm64
          #指定用户/仓库名
          tags: teamide/teamide-server-arm64:latest,teamide/teamide-server-arm64:${{ steps.release_version.outputs.value }}

      - run: |
          echo 'release_version:${{ steps.release_version.outputs.value }}'
          echo 'release_upload_url:${{ steps.release_upload_url.outputs.value }}'
          mv release/teamide-server-amd64 teamide-server-amd64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-amd64-${{steps.release_version.outputs.value}}.zip teamide-server-amd64-${{steps.release_version.outputs.value}}
          mv release/teamide-server-arm64 teamide-server-arm64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-arm64-${{steps.release_version.outputs.value}}.zip teamide-server-arm64-${{steps.release_version.outputs.value}}
          ls

      # 上传 到 Release
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: release/teamide-linux-x64/teamide-node
          asset_name: teamide-node-linux-x64-${{steps.release_version.outputs.value}} # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-arm64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-arm64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip


      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp -rf lib/shentong/amd64/libaci.so ./electron-template/assets/server/lib/libaci.so
          
          cd electron-template
          chmod +x assets/server/server
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --linux -p always

      # 上传共享资源
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: release

  buildWindow:
    needs: buildStatic
    runs-on: windows-2019
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v1

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.14"
      - name: Setup GCC
        id: setupGCC
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: gcc-10.2.0

      # 将静态资源打包html.go
      # -H=windowsgui
      #          mv release/html.go internal/static/html.go
      - run: |
          go env -w CC=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin\gcc
          mv release/statics ./electron-template/assets/server/statics
          go mod tidy
          go build -ldflags "-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./electron-template/assets/server/server.exe .

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp lib/shentong/win64/aci.dll electron-template/assets/server/lib/aci.dll
          cp lib/shentong/win64/aci.lib electron-template/assets/server/lib/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll electron-template/assets/server/lib/pthreadVC2_x64.dll
          
          cp lib/shentong/win64/aci.dll electron-template/assets/server/aci.dll
          cp lib/shentong/win64/aci.lib electron-template/assets/server/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll electron-template/assets/server/pthreadVC2_x64.dll

          cd electron-template
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --win -p always


